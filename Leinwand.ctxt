#BlueJ class context
comment0.target=Leinwand
comment0.text=\n\ <p>Leinwand\ ist\ eine\ Klasse,\ die\ einfache\ Zeichenoperationen\ auf\ einer\n\ leinwandartigen\ Zeichenflaeche\ ermoeglicht.\ Sie\ ist\ eine\ vereinfachte\ Version\n\ der\ Klasse\ Canvas\ (englisch\ fuer\ Leinwand)\ des\ JDK\ und\ wurde\ speziell\ fuer\ das\n\ Projekt\ "Figuren"\ geschrieben.</p>\n\ \n\ <p>In\ der\ erweiterten\ Fassung\ kann\ die\ Leinwand\ zusaetzlich\ auch\ Texte\ darstellen\n\ und\ Tastaturbefehle\ abfragen.\ Dadurch\ ist\ es\ moeglich,\ einfache\ Spiele\ auf\ der\n\ Leinwand\ zu\ programmieren.\ Die\ Farbpalette\ der\ Methode\ setzeZeichenfarbe\ ()\n\ wird\ schrittweise\ erweitert,\ um\ den\ Anwendungsbeduerfnissen\ gerecht\ zu\ werden.</p>\n\ \n\ @author\ Bruce\ Quig\n\ @author\ Michael\ Koelling\ (mik)\n\ @author\ Axel\ Schmolitzky\n\ \n\ @author\ Bernd\ Gramlich\n\ @author\ Anja\ Sundhaus\n\ @author\ Stefanie\ E.\n\ \n\ @version\ 2019-12-15\n
comment1.params=
comment1.target=Leinwand\ gibLeinwand()
comment1.text=\n\ Gib\ die\ einzige\ verfuegbare\ Leinwand\ zurueck\ (also\ den\n\ "leinwandSingleton").\ Wenn\ die\ Leinwand\ noch\ nicht\n\ erzeugt\ ist,\ erzeuge\ sie\ mit\ Defaultwerten\ fuer\ Titel,\n\ Breite,\ Hoehe\ und\ Grundfarbe.\n
comment10.params=figur
comment10.target=java.awt.Shape\ gibForm(java.lang.Object)
comment10.text=\n\ Nenne\ den\ Shape\ zu\ einer\ Figur.\n\ \n\ @param\ figur\n\ \ \ \ \ \ \ \ \ \ \ \ die\ Figur,\ deren\ Shape\ genannt\ werden\ soll\n
comment11.params=text\ farbe\ zeichenkette\ x\ y\ drehX\ drehY\ zentrumX\ zentrumY\ ausrichtungX\ ausrichtungY\ groesse
comment11.target=void\ merkeZumSchreibenVor(java.lang.Object,\ java.awt.Color,\ java.lang.String,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int)
comment11.text=\n\ Merke\ fuer\ das\ gegebene\ Text-Objekt\ eine\ Zeichenkette\ (einen\ String)\ auf\n\ der\ Leinwand\ zum\ Schreiben\ vor.\n\ \n\ @param\ text\n\ \ \ \ \ \ \ \ \ \ \ \ das\ Text-Objekt,\ fuer\ das\ ein\ String\ geschrieben\ werden\ soll\n\ @param\ farbname\n\ \ \ \ \ \ \ \ \ \ \ \ die\ Farbe\ des\ Textes\n\ @param\ zeichenkette\n\ \ \ \ \ \ \ \ \ \ \ \ ein\ Objekt\ der\ Klasse\ String,\ das\ tatsaechlich\ geschrieben\ wird\n\ @param\ x\n\ \ \ \ \ \ \ \ \ \ \ \ x-Koordinate\ des\ Textes\n\ @param\ y\n\ \ \ \ \ \ \ \ \ \ \ \ y-Koordinate\ des\ Textes\n\ @param\ drehX\n\ \ \ \ \ \ \ \ \ \ \ \ x-Koordinate\ des\ Drehvektors\n\ @param\ drehY\n\ \ \ \ \ \ \ \ \ \ \ \ y-Koordinate\ des\ Drehvektors\n\ @param\ zentrumX\n\ \ \ \ \ \ \ \ \ \ \ \ x-Koordinate\ des\ Drehzentrums\n\ @param\ zentrumY\n\ \ \ \ \ \ \ \ \ \ \ \ y-Koordinate\ des\ Drehzentrums\n\ @param\ ausrichtungX\n\ \ \ \ \ \ \ \ \ \ \ \ Referenzpunkt\ der\ x-Koordinatenverschiebung\ (0\:\ Textmitte,\ 1\:\ rechte\ Textmitte,\ -1\:\ linke\ Textmitte)\n\ @param\ ausrichtungY\n\ \ \ \ \ \ \ \ \ \ \ \ Referenzpunkt\ der\ y-Koordinatenverschiebung\ (0\:\ Textmitte,\ 1\:\ untere\ Textmitte,\ -1\:\ obere\ Textmitte)\n\ @param\ groesse\n\ \ \ \ \ \ \ \ \ \ \ \ Schriftgroesse\ des\ Textes\n
comment12.params=text\ farbe\ zeichenkette\ x\ y\ drehX\ drehY\ zentrumX\ zentrumY\ ausrichtungX\ ausrichtungY\ groesse
comment12.target=void\ schreibe(java.lang.Object,\ java.awt.Color,\ java.lang.String,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int)
comment12.text=\n\ Schreibe\ fuer\ das\ gegebene\ Text-Objekt\ eine\ Zeichenkette\ (einen\ String)\ auf\n\ die\ Leinwand.\n\ \n\ @param\ text\n\ \ \ \ \ \ \ \ \ \ \ \ das\ Text-Objekt,\ fuer\ das\ ein\ String\ geschrieben\ werden\ soll\n\ @param\ farbe\n\ \ \ \ \ \ \ \ \ \ \ \ die\ Farbe\ des\ Textes\n\ @param\ zeichenkette\n\ \ \ \ \ \ \ \ \ \ \ \ ein\ Objekt\ der\ Klasse\ String,\ das\ tatsaechlich\ geschrieben\ wird\n\ @param\ x\n\ \ \ \ \ \ \ \ \ \ \ \ x-Koordinate\ des\ Textes\n\ @param\ y\n\ \ \ \ \ \ \ \ \ \ \ \ y-Koordinate\ des\ Textes\n\ @param\ drehX\n\ \ \ \ \ \ \ \ \ \ \ \ x-Koordinate\ des\ Drehvektors\n\ @param\ drehY\n\ \ \ \ \ \ \ \ \ \ \ \ y-Koordinate\ des\ Drehvektors\n\ @param\ zentrumX\n\ \ \ \ \ \ \ \ \ \ \ \ x-Koordinate\ des\ Drehzentrums\n\ @param\ zentrumY\n\ \ \ \ \ \ \ \ \ \ \ \ y-Koordinate\ des\ Drehzentrums\n\ @param\ ausrichtungX\n\ \ \ \ \ \ \ \ \ \ \ \ Referenzpunkt\ der\ x-Koordinatenverschiebung\ (0\:\ Textmitte,\ 1\:\ rechte\ Textmitte,\ -1\:\ linke\ Textmitte)\n\ @param\ ausrichtungY\n\ \ \ \ \ \ \ \ \ \ \ \ Referenzpunkt\ der\ y-Koordinatenverschiebung\ (0\:\ Textmitte,\ 1\:\ untere\ Textmitte,\ -1\:\ obere\ Textmitte)\n\ @param\ groesse\n\ \ \ \ \ \ \ \ \ \ \ \ Schriftgroesse\ des\ Textes\n
comment13.params=text
comment13.target=void\ merkeZumRadierenVor(java.lang.Object)
comment13.text=\n\ Merke\ den\ gegebenen\ Text\ zum\ Radieren\ von\ der\ Leinwand\ vor.\n\ \n\ @param\ text\n\ \ \ \ \ \ \ \ \ \ \ \ der\ Text,\ dessen\ Zeichenkette\ entfernt\ werden\ soll\n
comment14.params=text
comment14.target=void\ radiere(java.lang.Object)
comment14.text=\n\ Radiere\ den\ gegebenen\ Text\ von\ der\ Leinwand.\n\ \n\ @param\ text\n\ \ \ \ \ \ \ \ \ \ \ \ der\ Text,\ dessen\ Zeichenkette\ entfernt\ werden\ soll\n
comment15.params=farbe
comment15.target=void\ setzeZeichenfarbe(java.awt.Color)
comment15.text=\n\ Setze\ die\ Zeichenfarbe\ der\ Leinwand.\n\ \n\ @param\ farbe\n\ \ \ \ \ \ \ \ \ \ \ \ die\ neue\ Zeichenfarbe.\n
comment16.params=ueberschrift
comment16.target=void\ setzeUeberschrift(java.lang.String)
comment16.text=\n\ Gib\ der\ Leinwand\ eine\ neue\ Ueberschrift.\n\ \n\ @param\ ueberschrift\n\ \ \ \ \ \ \ \ \ \ \ \ die\ neue\ Ueberschrift.\n
comment17.params=millisekunden
comment17.target=void\ warte(int)
comment17.text=\n\ Warte\ fuer\ die\ angegebenen\ Millisekunden.\ Mit\ dieser\ Operation\ wird\ eine\n\ Verzoegerung\ definiert,\ die\ fuer\ animierte\ Zeichnungen\ benutzt\ werden\ kann.\n\ \n\ @param\ millisekunden\n\ \ \ \ \ \ \ \ \ \ \ \ die\ zu\ wartenden\ Millisekunden\n
comment18.params=
comment18.target=void\ erneuere()
comment18.text=\n\ Zeichne\ erneut\ alle\ Figuren\ und\ Texte\ auf\ der\ Leinwand.\n
comment19.params=
comment19.target=void\ loesche()
comment19.text=\n\ Loesche\ die\ gesamte\ Leinwand.\n
comment2.params=titel\ breite\ hoehe\ grundfarbe
comment2.target=Leinwand\ erzeugeLeinwand(java.lang.String,\ int,\ int,\ java.awt.Color)
comment2.text=\n\ Erzeuge\ die\ einzig\ verfuegbare\ Leinwand\ (also\ den\n\ "leinwandSingleton").\ Wenn\ die\ Leinwand\ bereits\ erzeugt\n\ war,\ ersetze\ sie\ durch\ eine\ neue\ Leinwand.\n\ \n\ @param\ titel\n\ \ \ \ \ \ \ \ \ \ \ \ Titel,\ der\ im\ Rahmen\ der\ Leinwand\ angezeigt\ wird\n\ @param\ breite\n\ \ \ \ \ \ \ \ \ \ \ \ die\ gewuenschte\ Breite\ der\ Leinwand\n\ @param\ hoehe\n\ \ \ \ \ \ \ \ \ \ \ \ die\ gewuenschte\ Hoehe\ der\ Leinwand\n\ @param\ grundfarbe\n\ \ \ \ \ \ \ \ \ \ \ \ die\ Hintergrundfarbe\ der\ Leinwand\n
comment20.params=
comment20.target=void\ loescheAlles()
comment20.text=\n\ Loesche\ die\ gesamte\ Leinwand\ und\ ihre\ Daten.\n
comment21.params=
comment21.target=java.awt.event.KeyEvent\ gibTastendruck()
comment21.text=\n\ Gib\ den\ letzten,\ noch\ nicht\ verarbeiteten\ Tastendruck\ zurueck,\n\ den\ die\ Leinwand\ empfangen\ hat.\ Falls\ kein\ Tastendruck\ vorkam,\n\ wird\ null\ zurueckgegeben.\n
comment22.params=
comment22.target=int\ gibBreite()
comment22.text=\n\ Nenne\ die\ Breite\ der\ Zeichenflaeche.\n
comment23.params=
comment23.target=int\ gibHoehe()
comment23.text=\n\ Nenne\ die\ Hoehe\ der\ Zeichenflaeche.\n
comment24.params=
comment24.target=javax.swing.JFrame\ gibFenster()
comment24.text=\n\ Nenne\ das\ Fenster,\ auf\ dem\ die\ Leinwand\ liegt.\n
comment25.params=
comment25.target=javax.swing.JPanel\ gibZeichenflaeche()
comment25.text=\n\ Nenne\ die\ Zeichenflaeche\ der\ Leinwand.\n
comment3.params=titel\ breite\ hoehe\ grundfarbe
comment3.target=Leinwand(java.lang.String,\ int,\ int,\ java.awt.Color)
comment3.text=\n\ Konstruktor.\n\ Erzeuge\ eine\ Leinwand.\n\ \n\ Der\ Konstruktor\ ist\ private,\ weil\ er\ von\ aussen\ nicht\ aufgerufen\n\ werden\ soll.\ Stattdessen\ soll\ mit\ gibLeinwand\ ()\ auf\ die\n\ Leinwand\ zugegriffen\ werden.\n\ \n\ @param\ titel\n\ \ \ \ \ \ \ \ \ \ \ \ Titel,\ der\ im\ Rahmen\ der\ Leinwand\ angezeigt\ wird\n\ @param\ breite\n\ \ \ \ \ \ \ \ \ \ \ \ die\ gewuenschte\ Breite\ der\ Leinwand\n\ @param\ hoehe\n\ \ \ \ \ \ \ \ \ \ \ \ die\ gewuenschte\ Hoehe\ der\ Leinwand\n\ @param\ grundfarbe\n\ \ \ \ \ \ \ \ \ \ \ \ die\ Hintergrundfarbe\ der\ Leinwand\n
comment4.params=sichtbar
comment4.target=void\ setzeSichtbarkeit(boolean)
comment4.text=\n\ Setze,\ ob\ diese\ Leinwand\ sichtbar\ sein\ soll\ oder\ nicht.\ Wenn\ die\ Leinwand\n\ sichtbar\ gemacht\ wird,\ wird\ ihr\ Fenster\ in\ den\ Vordergrund\ geholt.\ Diese\n\ Operation\ kann\ auch\ benutzt\ werden,\ um\ ein\ bereits\ sichtbares\n\ Leinwandfenster\ in\ den\ Vordergrund\ (vor\ andere\ Fenster)\ zu\ holen.\n\ \n\ @param\ sichtbar\n\ \ \ \ \ \ \ \ \ \ \ \ boolean\ fuer\ die\ gewuenschte\ Sichtbarkeit\:\ true\ fuer\ sichtbar,\n\ \ \ \ \ \ \ \ \ \ \ \ false\ fuer\ nicht\ sichtbar.\n
comment5.params=millisec
comment5.target=void\ setzeVerschwindezeit(int)
comment5.text=\n\ Lege\ die\ Verschwindezeit\ fest.\n\ Nach\ der\ angegebenen\ Zahl\ von\ Millisekunden\ schliesst\ sich\ die\n\ Leinwand\ und\ loescht\ alle\ Inhalte.\n\ \n\ @param\ millisec\ Die\ Zeit\ in\ Millisekunden,\ nach\ der\ die\ Leinwand\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ verschwindet.\ Falls\ 0\ oder\ negativ,\ bleibt\ die\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Leinwand\ stabil.\ Wenn\ zuvor\ schon\ Verschwindeprozesse\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ angestossen\ wurden,\ wird\ ihre\ Verschwindezeit\ nicht\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ mehr\ nachtraeglich\ geaendert,\ es\ sei\ denn,\ der\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Parameter\ ist\ 0\ oder\ negativ.\n
comment6.params=figur\ farbe\ shape
comment6.target=void\ merkeZumZeichnenVor(java.lang.Object,\ java.awt.Color,\ java.awt.Shape)
comment6.text=\n\ Merke\ fuer\ das\ gegebene\ Figur-Objekt\ eine\ Java-Figur\ (einen\ Shape)\ auf\n\ der\ Leinwand\ zum\ Zeichnen\ vor.\n\ \n\ @param\ figur\n\ \ \ \ \ \ \ \ \ \ \ \ das\ Figur-Objekt,\ fuer\ das\ ein\ Shape\ gezeichnet\ werden\ soll\n\ @param\ farbe\n\ \ \ \ \ \ \ \ \ \ \ \ die\ Farbe\ der\ Figur\n\ @param\ shape\n\ \ \ \ \ \ \ \ \ \ \ \ ein\ Objekt\ der\ Klasse\ Shape,\ das\ tatsaechlich\ gezeichnet\ wird\n
comment7.params=figur\ farbe\ shape
comment7.target=void\ zeichne(java.lang.Object,\ java.awt.Color,\ java.awt.Shape)
comment7.text=\n\ Zeichne\ fuer\ das\ gegebene\ Figur-Objekt\ eine\ Java-Figur\ (einen\ Shape)\ auf\n\ die\ Leinwand.\n\ \n\ @param\ figur\n\ \ \ \ \ \ \ \ \ \ \ \ das\ Figur-Objekt,\ fuer\ das\ ein\ Shape\ gezeichnet\ werden\ soll\n\ @param\ farbe\n\ \ \ \ \ \ \ \ \ \ \ \ die\ Farbe\ der\ Figur\n\ @param\ shape\n\ \ \ \ \ \ \ \ \ \ \ \ ein\ Objekt\ der\ Klasse\ Shape,\ das\ tatsaechlich\ gezeichnet\ wird\n
comment8.params=figur
comment8.target=void\ merkeZumEntfernenVor(java.lang.Object)
comment8.text=\n\ Merke\ die\ gegebene\ Figur\ zum\ Entfernen\ von\ der\ Leinwand\ vor.\n\ \n\ @param\ figur\n\ \ \ \ \ \ \ \ \ \ \ \ die\ Figur,\ deren\ Shape\ entfernt\ werden\ soll\n
comment9.params=figur
comment9.target=void\ entferne(java.lang.Object)
comment9.text=\n\ Entferne\ die\ gegebene\ Figur\ von\ der\ Leinwand.\n\ \n\ @param\ figur\n\ \ \ \ \ \ \ \ \ \ \ \ die\ Figur,\ deren\ Shape\ entfernt\ werden\ soll\n
numComments=26
